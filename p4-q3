# print("1")
# print("1")
# print("2")
# print("2")
# print("1")
# print("3")
class Node(object):
    def __init__(self, data=None, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right

class Tree:
    def _init_(self):
        self.root = None

    def getRoot(self):
        return self.root

    def add(self, val):
        if(self.root == None):
            self.root = Node(val)
        else:
            self._add(val, self.root)

    def _add(self, val, node):
        if(val < node.v):
            if(node.left != None):
                self._add(val, node.left)
            else:
                node.left = Node(val)
        else:
            if(node.right != None):
                self._add(val, node.right)
            else:
                node.right = Node(val)

# class tree:
# 	def _init_(self):
#         self.root = None

#     def getRoot(self):
#         return self.root

#     def add(self, val):
#         if(self.root == None):
#             self.root = Node(val)
#         else:
#             self._add(val, self.root)

#     def _add(self, val, Node):
#     	if Node.left != None:
#     		Node.left = Node(val)
#     	elif Node.left == None and Node.right != None:
#     		Node.right = Node(val)
#     	else:
#     		self._add(val, Node.left)

def buildTree(i):
    if i < len(values):
        return Node(values[i], left=buildTree((i+1)*2-1), right=buildTree((i+1)*2))


def pathToNode(root, path, k):

    # base case handling
    if root is None:
        return False

     # append the node value in path
    path.append(root.data)

    # See if the k is same as root's data
    if root.data == k :
        return True

    # Check if k is found in left or right
    # sub-tree
    if ((root.left != None and pathToNode(root.left, path, k)) or
            (root.right!= None and pathToNode(root.right, path, k))):
        return True

    # If not present in subtree rooted with root,
    # remove root from path and return False
    path.pop()
    return False

def distance(root, data1, data2):
    if root:
        # store path corresponding to node: data1
        path1 = []
        pathToNode(root, path1, data1)

        # store path corresponding to node: data2
        path2 = []
        pathToNode(root, path2, data2)

        # iterate through the paths to find the
        # common path length
        i=0
        while i<len(path1) and i<len(path2):
            # get out as soon as the path differs
            # or any path's length get exhausted
            if path1[i] != path2[i]:
                break
            i = i+1

        # get the path length by deducting the
        # intersecting path length (or till LCA)
        return (len(path1)+len(path2)-2*i)
    else:
        return 0


n,p = map(int, input().split())
values = [int(j) for j in input().split()]
# buildTree(0)
root = buildTree(0)
dis = []
for z in range(p):
	a, b = map(int, input().split()) 
	dis.append(distance(root, a, b))

for h in range(len(dis)):
	print(dis[h])
# root.left = Node(2)
# root.right = Node(3)
# root.left.left = Node(4)
# dist = distance (root,1,2)
# print (dist)
# dist = distance (root,1,3)
# print (dist)
# dist = distance (root,1,4)
# print (dist)
# dist = distance (root,2,3)
# print (dist)
# dist = distance (root,2,4)
# print (dist)
# dist = distance (root,3,4)
# print (dist)
